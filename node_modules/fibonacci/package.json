{
  "_from": "fibonacci",
  "_id": "fibonacci@1.6.7",
  "_inBundle": false,
  "_integrity": "sha512-nVgSm9CiotuqZCQmi+fLqhZIDlLihBOfheKt41KaOym1oH1GZo4IsW9EG2x94u92wRcQYiXgBbplbpjAdo1Uxw==",
  "_location": "/fibonacci",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "fibonacci",
    "fetchSpec": "latest",
    "name": "fibonacci",
    "raw": "fibonacci",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/fibonacci/-/fibonacci-1.6.7.tgz",
  "_shasum": "9b5eae3bafb2d1936f5c782196fff8ffa5a31bb7",
  "_spec": "fibonacci",
  "_where": "/home/vijayvaidya/Desktop/JamaPunji",
  "author": {
    "email": "fr@nkl.in",
    "name": "Franklin van de Meent",
    "url": "https://frankl.in"
  },
  "bugs": {
    "url": "https://github.com/fvdm/nodejs-fibonacci/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "bn.js": "^4.11.8"
  },
  "deprecated": false,
  "description": "Calculate fibonacci numbers for endless iterations.",
  "devDependencies": {
    "dotest": "^2.6.1"
  },
  "engines": {
    "node": ">=8.0.0"
  },
  "files": [
    "example.js"
  ],
  "homepage": "https://github.com/fvdm/nodejs-fibonacci#readme",
  "keywords": [
    "bignum",
    "fibonacci",
    "generator",
    "iterator",
    "math",
    "sequence",
    "unlicense"
  ],
  "license": "Unlicense",
  "main": "fibonacci.js",
  "name": "fibonacci",
  "optionalDependencies": {},
  "readme": "fibonacci\n=========\n\nModule for [node.js](http://nodejs.org/) to calculate fibonacci numbers for one or\nendless iterations, until you run out of memory.\n\n[![npm](https://img.shields.io/npm/v/fibonacci.svg?maxAge=3600)](https://github.com/fvdm/nodejs-fibonacci/blob/master/CHANGELOG.md)\n[![Build Status](https://travis-ci.org/fvdm/nodejs-fibonacci.svg?branch=master)](https://travis-ci.org/fvdm/nodejs-fibonacci)\n[![Coverage Status](https://coveralls.io/repos/github/fvdm/nodejs-fibonacci/badge.svg?branch=master)](https://coveralls.io/github/fvdm/nodejs-fibonacci?branch=master)\n[![Greenkeeper](https://badges.greenkeeper.io/fvdm/nodejs-fibonacci.svg)](https://greenkeeper.io/)\n\nUsing the [bn.js](https://www.npmjs.com/package/bn.js) module it can return numbers\nof any size without being limited by the hardcoded javascript `Number.MAX_LIMIT`.\n\n\nUsage\n-----\n\n### Just one\n\nFind one fibonacci number at 3000 iterations:\n\n```js\nconst fibonacci = require ('fibonacci');\nconst bigNumber = fibonacci.iterate (3000);\nconsole.log (bigNumber);\n```\n\nResult:\n\n```js\n{ number: '410615886307971260333568378719267105220125108637369252408885430926905584274113403731330491660850044560830036835706942274588569362145476502674373045446852160486606292497360503469773453733196887405847255290082049086907512622059054542195889758031109222670849274793859539133318371244795543147611073276240066737934085191731810993201706776838934766764778739502174470268627820918553842225858306408301661862900358266857238210235802504351951472997919676524004784236376453347268364152648346245840573214241419937917242918602639810097866942392015404620153818671425739835074851396421139982713640679581178458198658692285968043243656709796000',\nlength: 627,\niterations: '3000',\nms: 208 }\n```\n\n\n### Many numbers\n\nGet all numbers up to 4 seconds.\n\n> **WARNING:** it is very important that you run the `iterate()` function AFTER the `.on('result')`\n> event, otherwise the iteration will continue forever without emitting the events!\n\n```js\nfibonacci.on ('result', num => {\n  console.log (`${num.iterations} / ${num.number}\\n`);\n\n  if (num.ms > 4000) {\n    console.log ('Done!');\n    fibonacci.kill();\n  }\n});\n\n// run this AFTER everything\nfibonacci.iterate();\n```\n\nHere you see I use the **[result](#event-result)** event to catch each result,\nthe num**.ms** property to figure out how many milliseconds have passed\nand finally **[kill()](#method-kill)** to stop the iteration.\n\n\nInstallation\n------------\n\n`npm i fibonacci --save`\n\n\nMethod .iterate\n---------------\n**( [max_iterations] )**\n\nRun the iteration\n\n\nargument       | type   | required | default | description\n:--------------|:-------|:---------|:--------|:--------------------------------------------\nmax_iterations | number | no       |         | Limit iterations, otherwise continue forever\n\n\nWithout this argument it will continue untill **[kill()](#method-kill)** is called,\nthe process terminated or system ran out of memory.\n\n\n#### Returns\n\n_resultObject_ with these elements:\n\nproperty   | type    | description\n:----------|:--------|:-----------------\nnumber     | string  | calculated number\nlength     | string  | number of digits\niterations | string  | amount of iterations to find number\nms         | integer | duration in milliseconds\n\n\nMethod .kill\n------------\n**( )**\n\nStop the iteration loop.\n\n\nEvent result\n------------\n**( resultObject )**\n\nEmitted when a result is found.\n\n\n#### Callback\n\n_resultObject_ with these elements:\n\nproperty   | type    | description\n:----------|:--------|:-----------------\nnumber     | string  | calculated number\nlength     | string  | number of digits\niterations | string  | amount of iterations to find number\nms         | integer | duration in milliseconds\n\n\nEvent done\n----------\n**( resultObject )**\n\nEmitted when `max_iterations` is reached,\nsee [Event result](#event-result) for details.\n\n\nEvent stop\n----------\n**( reason )**\n\nEmitted when the iteration has stopped without user interaction.\nFor now only used to catch _infinite_ loops, if any.\n\n\n#### Returns:\nobject with these elements:\n\nproperty    | type   | description\n:-----------|:-------|:---------------------------\nreason      | string | `infinity`\nmax_limit   | string | value of `Number.MAX_LIMIT`\nlast_result | object | [resultObject](#event-result) of last number\niterations  | number | total iterations ran\nintended    | number | amount if iterations intended to run\n\n\nUnlicense\n-------\n\nThis is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <http://unlicense.org/>\n\n\nAuthor\n------\n\n[Franklin van de Meent](https://frankl.in)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/fvdm/nodejs-fibonacci.git"
  },
  "scripts": {
    "test": "dotest"
  },
  "tonicExampleFilename": "example.js",
  "version": "1.6.7"
}
