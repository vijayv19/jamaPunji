What is Git ?

- Distributed source control system.
- Massively Sacles
- Open source
- Developed for linux project requirements.
- Most operation are local.
- Very fast.

Key Concepts 

- Repository contains files, history, config managed by git.
- Three States and Git
   - Working directory
   - Staging area pre commit holding area.
   - Commit - Git Repository ( history )
- Remote Repository (Git Hub)
- Master Branch

git config --global user.name "vijayv19"
git config --global user.email "vijayvaidya99@gmail.com"
git config --global --list

user.name=vijayv19
user.email=vijayvaidya99@gmail.com

//-----------------------------------------------------------------------------------------------------

** Git Commands **

git status

- Untracked file is a file on Working directory that has not been added at git yet.

After <git add <fileName>>  command
 -File will come into the Staging area from Working directory.
 -Now it becomes new file from Untracked file.

After <git commit -m <"adding new file">> command
 - Now a new file moved from Staging area to Local Repository.

After <git push origin master> command
 - origin refers to the GitHub copy of our Repository.
 - master refers to our default and only branch in the Repository.
Above command will the file from local Repository to Remote Repository.

Basic git workflow life cycle

-------------------------------------------------------------------------------------------------------
                  Local                               |      Remote
----------------------------------------------------------------------------------------------------                              
Working    |       Staging   |       Repository       |        
Directory  |        Area     |       (.git folder)    |  
-------------------------------------------------------
           |                 |                        |
           |                 |                        |  
------------------------------------------------------------------------------------------------------


Git basic overview

- Starting a project
 - Fresh (no source yet)
 - Existing source locally
 - gitHub project

- Basic workflow (add, commit, push and pull)
- Working with files (rename, move and delete)
- History and aliases
- Ignoring unwanted files

To create a git project, command is :
  - git init <projectName>

Fork button on github helps to make the copy of the Repository to another github account.


Do add and commit in single command
 - git commit -am "<commit msg>"

Command to see all tracked files is 
 - git ls-files

once a new files comes into the Staging area it becomes a new file from untacked files and we 
can see that file in git ls-files command

If the file is in staging area and we donâ€™t want a coming and revert back to working directory
then use a command

git reset HEAD <fileName>

//----------------------------------------------------------------------------------------------

To discard the changes in working directory
git  checkout -- <fileName>


It will rename the file name and move the file from working directory to staging area.

Git mv fileName newFileName


.gitignore file helps to exclude the files from the git Repository.

-------------------------------------------------------------------------------------------------------

First, check that your origin is set by running

git remote -v

For adding origin
git remote add origin <originName>
eg. git remote add origin https://github.com/vijayv19/jamaPunji.git

//-------------------------------------------------------------------

git pull --rebase origin master

//-------------------------------------------------

1.Comparing Working Directory and the Staging Area
command => git diff

2.Comparing between the Staging Area and the Git Repository (Last Commit)
command => git diff --staged HEAD

3.Comparing Working Directory and Git Repository (Last Commit)
command => git diff HEAD


Limiting Comparsons to one File
 git diff -- <fileName>
 eg.  git diff -- README.md

Comparing Between Commits 
 git log --oneline --graph --decorate
 git log --oneline  => it gives all commits id with commit message

 git diff commitId1 HEAD

 HEAD is last commit in the current branch.


 git diff HEAD HEAD^  ==> this compare HEAD and HEAD-1(Just prior to the last commit) 

//----------------------------------------------------------------------------------------------

Comparing Between Local and Remote Master Branches

 git diff master origin/master

//----------------------------------------------------------------------------------------------

Branching And Merging

git branch -a => it will display all the local and remote branches.

git branch <branchName> => it will create a new branch

git checkout <branchName> => it will switched to a other branch

git branch -m <branchName> <newbranchName> => it will rename the branch

git branch -d <branchName> => it will delete the branch

git checkout -b <branchName> => it will create a new branch and swithced to that branch


git merge <branchName> => it will merge all the chages of <branchName> with currently present branch.

//----------------------------------------------------------------------------------------------

Conflicting Merges and Resolution

//----------------------------------------------------------------------------------------------

Stashing

git stash

git stash temporarily shelves (or stashes) changes you've made to your working copy so you 
can work on something else, and then come back and re-apply them later on. Stashing is handy 
if you need to quickly switch context and work on something else, but you're mid-way through 
a code change and aren't quite ready to commit.

//----------------------------------------------------------------------------------------------

By default, running git stash will stash:

changes that have been added to your index (staged changes)
changes made to files that are currently tracked by Git (unstaged changes)
But it will not stash:

new files in your working copy that have not yet been staged files that have been ignored
So if we add a third file to our example above, but don't stage it (i.e. we don't run git add),
git stash won't stash it.

git stash -u 

Adding the -u option (or --include-untracked) tells git stash to also stash your untracked files:

Another way to look at it: git stash pop is  equal to git stash apply && git stash drop.
Note: that the stash is local to your Git repository; stashes are not transferred to the server when you push.

Managing multiple stashes

git stash save "<msg>"

to list out all the stashes
git stash list

to aply the stash use command
git stash apply stash@{1}  ==> it will work for second last stashed

git status clear => it will clear(empty) all the stash list

//------------------------------------------

Stashing into a Branch

git stash branch <branchName>

above command will create a new branch switched to new branch and make same changes in new branch which was
there in previous branch and dropped the stash from the previous branch.

//----------------------------------------------------------------------------------------------

Rebasing

